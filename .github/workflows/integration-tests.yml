name: Integration tests

on:
  pull_request:
  push:
    branches:
    - master
    - stable
    - rc/**
    tags:
    - '**'
  workflow_dispatch:

# Stack will use the value of the GH_TOKEN environment variable to authenticate
# its requests of the GitHub REST API, providing a higher request rate limit.
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# As of 5 May 2023, ubuntu-latest, windows-latest and macos-latest come
# with Stack 2.9.3 and GHC 9.6.1. windows-latest comes with NSIS 3.08, for which
# the default value of the 'Unicode' installer attribute is 'true'.

jobs:
  integration-tests:
    name: Integration tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          release-args: "--alpine"
          cache-bust: ""
        - os: windows-latest
          release-args: ""
          cache-bust: "13"
        - os: macos-latest
          release-args: ""
          cache-bust: "23"
        - os: [self-hosted, macOS, ARM64]
          release-args: "--allow-dirty"
          cache-bust: "33"
    steps:
    - name: Clone project
      uses: actions/checkout@v3
    - name: Cache dependencies on Unix-like OS
      if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
      uses: actions/cache@v3
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('stack.yaml') }}-${{ matrix.cache-bust }}
    - name: Cache dependencies on Windows
      if: startsWith(runner.os, 'Windows')
      uses: actions/cache@v3
      with:
        path: |
          ~\AppData\Roaming\stack
          ~\AppData\Local\Programs\stack
        key: ${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('stack.yaml') }}-${{ matrix.cache-bust }}

    - name: Install deps and run checks
      shell: bash
      run: |
        set -ex

        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]
        then
          # Retry installing nix due to nondeterministic error
          #   Fatal error: glibc detected an invalid stdio handle
          # See:
          #   https://github.com/nh2/static-haskell-nix/pull/27#issuecomment-502652181
          #   https://github.com/NixOS/nix/issues/2733
          (for i in {1..5}; do bash <(curl -sSL https://nixos.org/nix/install) --no-daemon && exit 0; done; exit 1)
          . ~/.nix-profile/etc/profile.d/nix.sh
          nix-channel --add https://nixos.org/channels/nixos-22.05 nixpkgs
          nix-channel --update # Get GHC 8.2.2
        fi

        if [[ "${{ matrix.release-args }}" == "--alpine" ]]
        then
            mkdir -p ~/.stack
            touch ~/.stack/config.yaml
            cat > ~/.stack/config.yaml <<EOF
            extra-include-dirs:
            - /usr/include
            extra-lib-dirs:
            - /lib
            - /usr/lib
        EOF
        fi

        if [[ "${{ runner.os }}" == "macOS" ]] && [[ "${{ runner.arch }}" == "ARM64" ]] ; then
            export GHCUP_INSTALL_BASE_PREFIX="$GITHUB_WORKSPACE"
            export GHCUP_BIN="$GHCUP_INSTALL_BASE_PREFIX/.ghcup/bin"
            curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | BOOTSTRAP_HASKELL_MINIMAL=1 sh
            source "$(dirname "${GHCUP_BIN}")/env"
            ghcup install stack latest --force
            rm -rf ~/.stack/hooks
            bash .github/scripts/brew.sh git coreutils autoconf automake llvm@11
            export PATH="$HOME/.brew/bin:$HOME/.brew/sbin:$HOME/.brew/opt/llvm@11/bin:$PATH"
            export CC="$HOME/.brew/opt/llvm@11/bin/clang"
            export CXX="$HOME/.brew/opt/llvm@11/bin/clang++"
            export LD=ld
            export AR="$HOME/.brew/opt/llvm@11/bin/llvm-ar"
            export RANLIB="$HOME/.brew/opt/llvm@11/bin/llvm-ranlib"
        else
          # In case GHCup hooks have been created, remove them
          if [ -d $(stack path --stack-root)/hooks ]
          then
              rm -Rf $(stack path --stack-root)/hooks
          fi
        fi

        # Do this in the same step as installing deps to get relevant env var modifications
        stack etc/scripts/release.hs check ${{ matrix.release-args }}

        set +ex

    - name: Build bindist
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]] && [[ "${{ runner.arch }}" == "ARM64" ]] ; then
            export GHCUP_INSTALL_BASE_PREFIX="$GITHUB_WORKSPACE"
            export GHCUP_BIN="$GHCUP_INSTALL_BASE_PREFIX/.ghcup/bin"
            source "$(dirname "${GHCUP_BIN}")/env"
            export PATH="$HOME/.brew/bin:$HOME/.brew/sbin:$HOME/.brew/opt/llvm@11/bin:$PATH"
            export CC="$HOME/.brew/opt/llvm@11/bin/clang"
            export CXX="$HOME/.brew/opt/llvm@11/bin/clang++"
            export LD=ld
            export AR="$HOME/.brew/opt/llvm@11/bin/llvm-ar"
            export RANLIB="$HOME/.brew/opt/llvm@11/bin/llvm-ranlib"
        fi
        stack etc/scripts/release.hs build ${{ matrix.release-args }}

    - name: Upload bindist
      uses: actions/upload-artifact@v3
      with:
        name: ${{ runner.os }}-${{ runner.arch }}
        path: _release/stack-*

  github-release:
    name: Create GitHub release
    permissions:
      contents: write
    needs:
    - integration-tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v3
      with:
        name: Linux-X64
        path: _release
    - name: Download macOS artifact
      uses: actions/download-artifact@v3
      with:
        name: macOS-X64
        path: _release
    - name: Download macOS artifact (arm64)
      uses: actions/download-artifact@v3
      with:
        name: macOS-ARM64
        path: _release
    - name: Download Windows artifact
      uses: actions/download-artifact@v3
      with:
        name: Windows-X64
        path: _release
    - name: Hash assets
      shell: bash
      run: |
        set -e
        cd _release
        for asset in *; do
          shasum -a 256 "$asset" >"$asset.sha256"
        done
    - name: Create GitHub release (final)
      id: github_release_final
      if: "!startsWith(github.ref, 'refs/tags/rc/')"
      uses: ncipollo/release-action@v1.10.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: |
          See https://haskellstack.org/ for installation and upgrade instructions.

          **Changes since v[INSERT PREVIOUS VERSION]:**

          [INSERT CHANGELOG]

          **Thanks to all our contributors for this release:**

          [INSERT CONTRIBUTORS]
        draft: true
        prerelease: false
    - name: Create GitHub release (release candidate)
      id: github_release_rc
      if: "startsWith(github.ref, 'refs/tags/rc/')"
      uses: ncipollo/release-action@v1.10.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        body: |
          **Changes since v[INSERT PREVIOUS VERSION]:**

          [INSERT CHANGELOG]
        draft: true
        prerelease: true
    - name: Upload assets to GitHub release (final)
      if: "!startsWith(github.ref, 'refs/tags/rc/')"
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "_release/*"
        draft: true
        prerelease: false
        overwrite: true
        release_id: ${{ steps.github_release_final.outputs.id }}
    - name: Upload assets to GitHub release (release candidate)
      if: "startsWith(github.ref, 'refs/tags/rc/')"
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "_release/*"
        draft: true
        prerelease: true
        overwrite: true
        release_id: ${{ steps.github_release_rc.outputs.id }}

